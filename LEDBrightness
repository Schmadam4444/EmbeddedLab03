/**********************************
 * ADC Controlled LED
 *
 * Example which controls the LED Brightness via PWM which is varied based on an ADC Reading
 *
 * Author: Russell Trafford
 * Revision: 1.1
 * Last Revision Date: 12OCT22
 *
 * Change Log:
 *  12OCT22
 *  - Changed LED Pin to 6.0 to allow for control by Timer3B module
 *  - Using Pin 1.1 for being connected to Grove Connector Analog Channel 1
 *
 *
 * Pin Map:
 *               MSP430FR2355
 *            -----------------
 *        /|\|                 |
 *         | |                 |
 *         --|RST              |
 *           |                 |
 *       >---|P1.1/A1      P6.0|--> LED --> Wired to LED 2 through external wire to P6.6
 *
 *
 *
 *       ****WARNING****
 *       Please disconnect J11 and connect to Pin 6.0 to the lower part of the jumper
 *
 *        J11
 *       ____
 *      |    |
 *      | NC | <-- Keep this Disconnected
 *      |----|
 *      | ** | <-- Connect to this part of J11
 *      |____|
 *
 *
 *
 *
 * Peripherals Used:
 *      ADC12 - Channel 1 (Pin 1.1)
 *      GPIO - Pin 6.0
 *      TimerB0 - UP Mode, CCR1 for PWM Control, controls Pin 6.0
 */

#include <msp430.h>
#define BLINKY_DELAY_MS 500 //Change this as per your needs

void initTimer_A(void);
void delayMS(int msecs);

unsigned int OFCount;
int ADC_Result;
/*
 * main.c
 */
void gpioInit();        // Setup the GPIO Pins for controlling the LEDS through PWM (no input arguments)
void timerInit();       // Setup Timer to control the LEDS (no input arguments)
void adcInit();         // Setup ADC to do single, on demand samples (no input arguments)
int readADCSingle();    // Single Read ADC, no input arguments, returns current ADC reading
void setLEDBrightness(int DutyCycle);   // Takes in a duty cycle from 0-100 and converts it to an appropriate CCR value
int main(void)

{
WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer

gpioInit();
adcInit();
timerInit();
while(1){
    readADCSingle();
    setLEDBrightness(ADC_Result);
}
return 0;
}
/**
 * GPIO INIT
 * Initialize all GPIO Pins. Current Pin configuration:
 * Pin 1.0: OUTPUT, GPIO
 * Pin 1.1: INPUT,  ADC Channel 1
 */
void gpioInit(){
    // Configure GPIO Pin
        P6DIR |= BIT0;    // P6.0 output set for GPIO
        P6SEL0 |= BIT0;       // P6.0 sets options
    // Configure ADC Pin
        P1SEL0 |= BIT1;
        P1SEL1 |= BIT1;

        // Configure ADC12


    //pwm pins
        P6DIR |= BIT0; //6.0 accepts pwm i think
        P6SEL0 |= BIT0;



}
/**
 * Timer INIT
 * Initialize the Timer Peripheral to control a GPIO Pin with PWM in up mode
 * Timer Mode: Up Mode
 */
void timerInit(){
    // Configure Timer Module to Up Mode
    // Configure CCR Registers
    TB3CCR0 = 65536-1;                         // PWM Period
    TB3CCTL1 = OUTMOD_7;
    TB3CTL = TBSSEL__SMCLK | MC__UP | TBCLR;  // SMCLK, up mode, clear TBR

}



/**
 * ADC INIT
 * Initialize the ADC Peripheral to read Single measurements on demand.
 * ADC MODE: Single Sample, Single Conversion
 */
void adcInit(){
             ADCCTL0 |= ADCSHT_2 | ADCON;                             // ADCON, S&H=16 ADC clks
             ADCCTL1 |= ADCSHP;                                       // ADCCLK = MODOSC; sampling timer
             ADCCTL2 &= ~ADCRES;                                      // clear ADCRES in ADCCTL
             ADCCTL2 |= ADCRES_2;                                     // 12-bit conversion results
             ADCMCTL0 |= ADCINCH_1;                                   // A1 ADC input select; Vref=AVCC
             ADCIE |= ADCIE0;

}
/**
 * Read Single ADC Sample from Channel 0 of the ADC12 Peripheral
 * Returns an ADC Sample without interrupts.
 */
int readADCSingle(){
    // while (!(ADCIFG & ADCIFG0));   // Wait for sample to be sampled and converted
     ADCCTL0 |= ADCENC | ADCSC;                           // Sampling and conversion start
             __bis_SR_register(LPM0_bits | GIE);                  // LPM0, ADC_ISR will force exit
             __no_operation();
             return ADC_Result;// For debug only

}
/**

* Set LED Brightness on the LED configured from gpioInit. This modifies the

* CCR register based on the input.

* int DutyCycle: Value between 0-100

*/

void setLEDBrightness(int DutyCycle)

{
    TB3CCR1 = DutyCycle;
}

// ADC interrupt service routine
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=ADC_VECTOR
__interrupt void ADC_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(ADC_VECTOR))) ADC_ISR (void)
#else
#error Compiler not supported!
#endif
{
    switch(__even_in_range(ADCIV,ADCIV_ADCIFG))
    {
        case ADCIV_NONE:
            break;
        case ADCIV_ADCOVIFG:
            break;
        case ADCIV_ADCTOVIFG:
            break;
        case ADCIV_ADCHIIFG:
            break;
        case ADCIV_ADCLOIFG:
            break;
        case ADCIV_ADCINIFG:
            break;
        case ADCIV_ADCIFG:
            ADC_Result = ADCMEM0;
            __bic_SR_register_on_exit(LPM0_bits);            // Clear CPUOFF bit from LPM0
            break;
        default:
            break;
    }
}
